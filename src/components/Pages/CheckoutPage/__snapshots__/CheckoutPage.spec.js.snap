// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering should render the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CheckoutPage
    auth={
      Object {
        "isAuthenticated": true,
        "user": Object {
          "id": 1,
        },
      }
    }
    changeQuantity={[MockFunction]}
    checkoutOrder={[MockFunction]}
    history=""
    orders={Array []}
    success={
      Object {
        "status": true,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="cart-empty"
      >
        <div>
          Your cart is currently empty
        </div>
        <a
          href="/menu"
        >
          go the menu ....
        </a>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div>
            Your cart is currently empty
          </div>,
          <a
            href="/menu"
          >
            go the menu ....
          </a>,
        ],
        "className": "cart-empty",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Your cart is currently empty",
          },
          "ref": null,
          "rendered": "Your cart is currently empty",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "go the menu ....",
            "href": "/menu",
          },
          "ref": null,
          "rendered": "go the menu ....",
          "type": "a",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="cart-empty"
        >
          <div>
            Your cart is currently empty
          </div>
          <a
            href="/menu"
          >
            go the menu ....
          </a>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              Your cart is currently empty
            </div>,
            <a
              href="/menu"
            >
              go the menu ....
            </a>,
          ],
          "className": "cart-empty",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Your cart is currently empty",
            },
            "ref": null,
            "rendered": "Your cart is currently empty",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "go the menu ....",
              "href": "/menu",
            },
            "ref": null,
            "rendered": "go the menu ....",
            "type": "a",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
